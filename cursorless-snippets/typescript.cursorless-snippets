{
  "mobxConstructor": {
    "definitions": [
      {
        "scope": {
          "langIds": [
            "typescript",
            "javascript",
            "typescriptreact",
            "javascriptreact"
          ]
        },
        "body": [
          "constructor($parameters) {",
          "\tmakeAutoObservable(this);",
          "}"
        ]
      }
    ],
    "description": "Constructor using makeAutoObservable",
    "insertionScopeTypes": [
      "namedFunction"
    ]
  },
  "bindClassFunction": {
    "definitions": [
      {
        "scope": {
          "langIds": [
            "typescript",
            "javascript",
            "typescriptreact",
            "javascriptreact"
          ]
        },
        "body": [
          "this.${name/^(this.)?(.+)$/$2/} = this.${name/^(this.)?(.+)$/$2/}.bind(this)"
        ],
        "variables": {
          "name": {
            "formatter": "camelCase"
          }
        }
      }
    ],
    "description": "Bind function to this",
    "insertionScopeTypes": [
      "statement"
    ]
  },
  "constantDeclaration": {
    "definitions": [
      {
        "scope": {
          "langIds": [
            "typescript",
            "javascript",
            "typescriptreact",
            "javascriptreact"
          ]
        },
        "body": [
          "const $name = ${value/^([^;]*);?$/$1/};"
        ],
        "variables": {
          "name": {
            "formatter": "camelCase"
          }
        }
      }
    ],
    "description": "Constant variable declaration",
    "insertionScopeTypes": [
      "statement"
    ],
    "variables": {
      "value": {
        "wrapperScopeType": "statement"
      }
    }
  },
  "letDeclaration": {
    "definitions": [
      {
        "scope": {
          "langIds": [
            "typescript",
            "javascript",
            "typescriptreact",
            "javascriptreact"
          ]
        },
        "body": [
          "let $name = ${value/^([^;]*);?$/$1/};"
        ],
        "variables": {
          "name": {
            "formatter": "camelCase"
          }
        }
      }
    ],
    "description": "Let variable declaration",
    "insertionScopeTypes": [
      "statement"
    ],
    "variables": {
      "value": {
        "wrapperScopeType": "statement"
      }
    }
  }
}