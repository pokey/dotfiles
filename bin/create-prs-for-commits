#!/usr/bin/env bash
# Given a branchless query (defaults to `stack(.)`), creates PRs for every
# branch matched by the query.  Each PR is created with its base as the nearest
# ancestor of the given branch that is also a branch.
set -euo pipefail

query="${1:-stack(.)}"
main="$(git config branchless.core.mainBranch)"

git-branchless submit --create "$query"

branches="$(git-branchless query -b "$query")"

while read -r branch <&3; do
    existing_pr="$(gh pr view "$branch" --json url -t "{{.url}}" || echo -n "")"

    if [ -n "$existing_pr" ]; then
        echo "PR $existing_pr already exists for branch $branch"
        continue
    fi

    # If branch name starts with "bases/" or "base/", don't make a PR for it
    if [[ "$branch" =~ ^base(s)?/ ]]; then
        continue
    fi

    ancestor_query="ancestors(parents(\"$branch\")) & branches() & draft()"
    parent_branch=$(git-branchless query -b "$ancestor_query - ancestors(parents($ancestor_query))")
    if [ -z "$parent_branch" ]; then
        parent_branch="$main"
    else
        if [[ $parent_branch =~ $'\n' ]]; then
            echo "ERROR: Branch $branch has more than one parent branch: $parent_branch"
            exit 1
        fi

        existing_parent_pr="$(gh pr view "$parent_branch" --json url -t "{{.url}}" || echo -n "")"
        if [ -n "$existing_parent_pr" ]; then
            echo "- Depends on $existing_parent_pr" | pbcopy
            echo "Copied dependency message to clipboard for use in PR body"
        fi
    fi

    gh pr create \
        --draft \
        --base "$parent_branch" \
        --head "$branch"
done 3<<<"$branches"
