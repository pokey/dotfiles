#!/usr/bin/env bun

import assert from "assert";
import { execSync } from "child_process";
import { existsSync, appendFileSync } from "fs";
import { homedir } from "os";
import * as path from "path";

const LOG_FILE = "/usr/local/var/log/update-references.log";
const REFERENCES_FOLDER = path.join(homedir(), "src/zotero-notes-export");
const NOTES_FOLDER = path.join(homedir(), "notes");

/**
 * Commits in the references repository that are known to be missing in the
 * notes repository. These were applied in an older way, so don't match the
 * proper commit message format.
 */
const KNOWN_MISSING = [
  "7739007",
  "b11b7eb",
  "ff4ce8d",
  "73e3770",
  "1ccdbb6",
  "d887c5a",
  "741f81a",
  "ac91e75",
  "8df7381",
  "d15d0d5",
  "59a8fd5",
  "d399c7c",
  "4f1500d",
  "a509f76",
];

// Append to log file
function log(message: string) {
  if (message.length === 0) {
    return;
  }
  appendFileSync(LOG_FILE, message + "\n");
}

// Execute shell command and log output
function execAndLog(command: string, cwd: string): string {
  const output = exec(command, cwd);
  log(output);
  return output;
}

// Execute shell command
function exec(command: string, cwd: string): string {
  try {
    return execSync(command, { cwd }).toString().trim();
  } catch (error) {
    errorAndQuit(`Failed to execute command: ${command}`);
    throw error; // This line will never be reached, but it's here for clarity.
  }
}

function notify(
  title: string,
  message: string,
  group: string = "update-references",
  sound: string = "default"
) {
  execSync(
    `/usr/local/bin/terminal-notifier -group ${group} -sound ${sound} -title "${title}" -message "${message}"`
  );
}

function errorAndQuit(message: string) {
  log(`ERROR: ${message}`);
  log("Bailing out");
  notify("‚ùå Error", message, "notes-sync-error", "Funk");
  process.exit(-1);
}

log("---------------------------");

try {
  execAndLog("git add --all", REFERENCES_FOLDER);
  // Commit if there are changes
  const toCommit: string[] = [];
  if (execAndLog("git status --porcelain", REFERENCES_FOLDER)) {
    execAndLog(
      `git commit -m "[content] ${new Date().toISOString()}"`,
      REFERENCES_FOLDER
    );
    toCommit.push(exec("git rev-parse --short HEAD", REFERENCES_FOLDER));
  }

  // Find all commits in references repository that are not in notes repository,
  // as identified by looking for a commit in notes repository with name
  // "[references] <sha>". Note that we don't consider commits before 2023-12-31
  // because older commits can be problematic.
  const referencesCommits = exec(
    "git log --pretty=format:'%h' --reverse",
    REFERENCES_FOLDER
  );
  // Get subject of all commits in notes repository
  const notesCommits = exec(
    "git log --pretty=format:'%s' --reverse",
    NOTES_FOLDER
  );
  const missingReferenceCommits = referencesCommits
    .split("\n")
    .filter((sha) => !notesCommits.includes(`[references] ${sha}`))
    .filter((sha) => !KNOWN_MISSING.includes(sha));

  // Ensure that the only missing commits are expected
  assert.deepStrictEqual(missingReferenceCommits, toCommit);

  if (toCommit.length === 0) {
    log("No new commits to apply");
    log("---------------------------");
    log("");
    notify("Update references", "No new commits to apply");
    process.exit(0);
  }

  if (!existsSync(`${NOTES_FOLDER}/.git`)) {
    errorAndQuit("No .git directory in NOTES_FOLDER");
  }

  if (execAndLog("git status --porcelain", NOTES_FOLDER)) {
    execAndLog("git add --all", NOTES_FOLDER);
    execAndLog(
      `git commit -m "[content] ${new Date().toISOString()}"`,
      NOTES_FOLDER
    );
  }

  for (const commit of toCommit) {
    const diff = execAndLog(
      `git format-patch -1 --stdout ${commit}`,
      REFERENCES_FOLDER
    );

    log(`Applying ${commit} from references to notes...`);
    try {
      execSync(`echo "${diff}" | git apply --reject`, { cwd: NOTES_FOLDER });
    } catch (error) {
      errorAndQuit("Failed git apply");
    }

    const postPatchStatus = execAndLog("git status --porcelain", NOTES_FOLDER);
    if (postPatchStatus) {
      execAndLog("git add --all", NOTES_FOLDER);
      execAndLog(`git commit -m "[references] ${commit}"`, NOTES_FOLDER);
      const pushDiff = execAndLog(
        "git diff --shortstat head~..head",
        NOTES_FOLDER
      );
      notify("Update references", pushDiff);
    }
  }

  // Push changes
  process.chdir(REFERENCES_FOLDER);
  execAndLog("git push origin main", REFERENCES_FOLDER);
  process.chdir(NOTES_FOLDER);
  execAndLog("git push origin main", NOTES_FOLDER);

  log("---------------------------");
  log("");
} catch (error) {
  errorAndQuit(`An unexpected error occurred: ${error.message}`);
}
